//! Various utility and helper bits for the Aeron client. Predominantly helpful
//! in mapping between concepts in the C++ API and Rust

/// Helper type to indicate indexing operations in Aeron, Synonymous with the
/// Aeron C++ `index_t` type. Used to imitate the Java API.
// QUESTION: Can this just be updated to be `usize` in Rust?
pub type IndexT = i32;

/// Helper method for quick verification that `IndexT` is a positive power of two
pub fn is_power_of_two(idx: IndexT) -> bool {
    idx > 0 && (idx as u32).is_power_of_two()
}

/// Length of the data blocks used by the CPU cache sub-system in bytes
pub const CACHE_LINE_LENGTH: usize = 64;

/// Error types from operations in the Aeron client. Synonymous with the exceptions
/// generated by the C++ client.
#[derive(Debug, PartialEq)]
pub enum AeronError {
    /// Indication that an argument provided is an illegal value
    IllegalArgument,
    /// Indication that a memory access would exceed the allowable bounds
    OutOfBounds,
    /// Indication that a buffer operation could not complete because of space constraints
    InsufficientCapacity,
}

/// Result type for operations in the Aeron client
pub type Result<T> = ::std::result::Result<T, AeronError>;
